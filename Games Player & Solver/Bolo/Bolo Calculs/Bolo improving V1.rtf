{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red0\green0\blue0;\red100\green56\blue32;
\red196\green26\blue22;\red170\green13\blue145;\red92\green38\blue153;\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c0\c0\c0;\csgenericrgb\c39100\c22000\c12500;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c11000\c0\c81000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \CocoaLigature0 //\cf3 \
\
\cf2 //  main.cpp\cf3 \
\
\cf2 //  Bolo\cf3 \
\
\cf2 //\cf3 \
\
\cf2 //  Created by Dany on 29. 01. 2017./Users/dany/Desktop/main.cpp\cf3 \
\
\cf2 //  Copyright \'a9 2017 Dany. All rights reserved.\cf3 \
\
\cf2 //\cf3 \
\
\
\cf4 #include \cf5 <iostream>\cf4 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf3 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf4 #include \cf5 <vector>\cf4 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf3 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf4 #include \cf5 <string>\cf4 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf3 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf4 #include \cf5 <math.h>\cf4 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf3 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf4 #include \cf5 <cmath>\cf4 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf3 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf4 #include \cf5 <stdio.h>\cf4 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf3 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf4 #include \cf5 <stdlib.h>\cf4 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf3 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf4 #include \cf5 <time.h>\cf4 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf3 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf4 #include \cf5 <fstream>\cf4 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf3 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf4 #include \cf5 <random>\cf4 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf3 \
\cf6 using\cf3  \cf6 namespace\cf3  \cf7 std\cf3 ;\
\
\
\cf6 int\cf3  de1, de2, de3, de4, de5, de6, de7, n1, n2, n3, n4, n5, n6, ptsopt, j, k, l, m, c, a, b, s, r, t, ptp, ptn, donnees;\
\
\cf6 int\cf3  w1, w2, w3, w4, w5, w6, w7, w8; \cf2 // w1, w2, w3, w4 pour desopt  w5, w6, w7, w8 pour ptopt\cf3 \
\
string w9, w10, w11, w12, stats;\
\
\cf6 int\cf3  nbrejoueurs, cou1, cou2, cou3, cou4;\
\
string njo1, njo2, njo3, njo4, njo5, njo6, njo7, njo8;\
\
\cf6 int\cf3  ord1, ord2, ord3, ord4, e, g, h, i, nd, d, maxopt, z, q, xxx, ok, perdu, has, vict ,fin;\
\
\cf6 int\cf3  p1, p2, scoremeiljo, p1000, numj;\
\
\cf6 int\cf3  a2, a3, a5, a6, a8, a9, b2, b3, b5, b6, count1, count2, count3, count4, f, fp;\
\
string premier, a1, a4, a7, b1, b4, okk, hasard, meiljo;\
\
\cf6 long\cf3  \cf6 double\cf3  deltatj, deltaptt;\
\cf6 double\cf3  countturn;\
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf2 // Ponderation:\cf3 \
\cf2 //score plus petit que 1000: ligne 1520;\cf3 \
\cf2 //score juste apres 1000: ligne 1560;\cf3 \
\cf2 //score meileur joueur en dessus de 10'000, ordi en dessous meilleur joueur: ligne 1630;\cf3 \
\cf2 //score en dessus de 10'000 et depassement autre joueur: ligne 1670;\cf3 \
\cf2 //score moins bon que meilleur joueur: ligne 1800;\cf3 \
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf6 int\cf3  main() \{\
    srand( \cf6 static_cast\cf3 <\cf6 unsigned\cf3  \cf6 int\cf3 >(time(\cf6 NULL\cf3 ))); \cf2 // for random function\cf3 \
    njo1 = \cf5 "ordi1"\cf3 ;\
    njo2 = \cf5 "ordi2"\cf3 ;\
    njo3 = \cf5 "ordi3"\cf3 ;\
    njo4 = \cf5 "ordi4"\cf3 ;\
    \cf6 for\cf3  (f=\cf8 0\cf3 ; f<\cf8 1000\cf3 ; f++)\{\
        vict=\cf8 0\cf3 ;\
        fin=\cf8 0\cf3 ;\
        fp = f % \cf8 4\cf3  + \cf8 1\cf3 ;\
    \cf6 while\cf3 (fin==\cf8 0\cf3 )\{          \cf2 //debut du tour(de la boucle qui fait le tour)\cf3 \
        d=\cf8 7\cf3 ;\
        vector<\cf6 int\cf3 > joueurs;\
        joueurs.clear();\
        joueurs.push_back(ord1);\
        joueurs.push_back(ord2);\
        joueurs.push_back(ord3);\
        joueurs.push_back(ord4);\
        \
        vector<string> nj;\
        nj.push_back(njo1);\
        nj.push_back(njo2);\
        nj.push_back(njo3);\
        nj.push_back(njo4);\
        \
        \cf6 int\cf3  scoremeiljo = max(max(ord1,ord2), max(ord3, ord4));\
        \cf6 for\cf3 (m=\cf8 0\cf3 ; scoremeiljo != joueurs[m]; m++)\{\
        \}\
        meiljo = nj[m];\
        numj = joueurs[m];\
            \
            i=\cf8 0\cf3 ;\
            vector<\cf6 int\cf3 > ptopt;\
            vector<\cf6 int\cf3 > desopt;\
            vector<string> optch;\
            vector<\cf6 int\cf3 > sptopt;\
            vector<\cf6 int\cf3 > sdesopt;\
            vector<string> soptch;\
            vector<\cf6 double\cf3 > ptchem;\
            vector<\cf6 double\cf3 > edg;\
            vector<\cf6 double\cf3 > pperte;\
            vector<\cf6 double\cf3 > pvict;\
            vector<\cf6 double\cf3 > ptsmoy;\
            \
            pperte.push_back(\cf8 0.009\cf3 ); \cf2 // Attention au 0 qui est la premiere option(pour 0 d\'e9s th\'e9oriquement)!!\cf3 \
            pperte.push_back(\cf8 0.66667\cf3 );\
            pperte.push_back(\cf8 0.44444\cf3 );\
            pperte.push_back(\cf8 0.27778\cf3 );\
            pperte.push_back(\cf8 0.15741\cf3 );\
            pperte.push_back(\cf8 0.07716\cf3 );\
            pperte.push_back(\cf8 0.03086\cf3 );\
            pperte.push_back(\cf8 0.009\cf3 );\
            \
            ptsmoy.push_back(\cf8 915.2207\cf3 );\
            ptsmoy.push_back(\cf8 329.9997\cf3 );\
            ptsmoy.push_back(\cf8 298.3329\cf3 );\
            ptsmoy.push_back(\cf8 337.6376\cf3 );\
            ptsmoy.push_back(\cf8 426.9322\cf3 );\
            ptsmoy.push_back(\cf8 544.5257\cf3 );\
            ptsmoy.push_back(\cf8 712.0227\cf3 );\
            ptsmoy.push_back(\cf8 915.2207\cf3 );\
            \cf6 int\cf3  score2meiljo = max(ord2, max(ord3, ord4));\
        \cf6 if\cf3  (vict!=\cf8 0\cf3 )\{cout << \cf5 "erreur vict"\cf3 ;\}\
        \cf6 while\cf3 (z==\cf8 0\cf3 )\{            \cf2 //si z=0, le tour continue, si l'ordi s'arrete/perd, z=1 et le tour de l'ordi se termine\cf3 \
                random_device rd;\
                \
                mt19937 mt(rd());    \cf2 // The random number generator using a non-deterministic random device\cf3 \
                \
                uniform_int_distribution<\cf6 int\cf3 > dist(\cf8 1\cf3 ,\cf8 6\cf3 );    \cf2 // The distribution that gives us random numbers in [1,6]\cf3 \
                \
                vector<\cf6 int\cf3 > des;\
                de1=\cf8 0\cf3 , de2=\cf8 0\cf3 , de3=\cf8 0\cf3 , de4=\cf8 0\cf3 , de5=\cf8 0\cf3 , de6=\cf8 0\cf3 , de7=\cf8 0\cf3 ;\
            \
                    de1 = dist(mt);\
                    \
                    de2 = dist(mt);\
                    \
                    de3 = dist(mt);\
                    \
                    de4 = dist(mt);\
                    \
                    de5 = dist(mt);\
                    \
                    de6 = dist(mt);\
                    \
                    de7 = dist(mt);\
                    \
                    \cf6 switch\cf3 (d)\{\
                            \
                        \cf6 case\cf3  \cf8 7\cf3 :\
                            \
                            des.push_back (de7);\
                            \
                            des.push_back (de6);\
                            \
                            des.push_back (de5);\
                            \
                            des.push_back (de4);\
                            \
                            des.push_back (de3);\
                            \
                            des.push_back (de2);\
                            \
                            des.push_back (de1);\
                            \
                            \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4 << de5 << de6 << de7;\cf3 \
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 6\cf3 :\
                            \
                            des.push_back (de6);\
                            \
                            des.push_back (de5);\
                            \
                            des.push_back (de4);\
                            \
                            des.push_back (de3);\
                            \
                            des.push_back (de2);\
                            \
                            des.push_back (de1);\
                            \
                            \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4 << de5 << de6;\cf3 \
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 5\cf3 :\
                            \
                            des.push_back (de5);\
                            \
                            des.push_back (de4);\
                            \
                            des.push_back (de3);\
                            \
                            des.push_back (de2);\
                            \
                            des.push_back (de1);\
                            \
                            \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4 << de5;\cf3 \
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 4\cf3 :\
                            \
                            des.push_back (de4);\
                            \
                            des.push_back (de3);\
                            \
                            des.push_back (de2);\
                            \
                            des.push_back (de1);\
                            \
                            \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4;\cf3 \
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 3\cf3 :\
                            \
                            des.push_back (de3);\
                            \
                            des.push_back (de2);\
                            \
                            des.push_back (de1);\
                            \
                            \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3;\cf3 \
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 2\cf3 :\
                            \
                            des.push_back (de2);\
                            \
                            des.push_back (de1);\
                            \
                            \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2;\cf3 \
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 1\cf3 :\
                            \
                            des.push_back (de1);\
                            \
                            \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1;\cf3 \
                            \
                            \cf6 break\cf3 ;\
                            \
                    \}\
            \
                    \
                    \cf6 for\cf3 (m=\cf8 0\cf3 ; m<des.size(); m++)\{\
                        \
                        \cf6 while\cf3 ((des[m]<=\cf8 0\cf3 )||(des[m]>\cf8 6\cf3 ))\{\
                            \
                            cout << \cf5 "Il y a une erreur dans l'entr\'e9e des d\'e9s, veuillez r\'e9ecrire le/les d\'e9(s) erron\'e9"\cf3  << endl;\
                            \
                            cin >> des[m];\
                            \
                        \}\
                    \}\
                \
                \cf6 for\cf3  (i=\cf8 0\cf3 ; i<des.size(); i++)\{\
                    \
                    \
                    \
                    \cf6 switch\cf3  (des[i])\{\
                            \
                        \cf6 case\cf3  \cf8 1\cf3 : n1++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 2\cf3 : n2++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 3\cf3 : n3++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 4\cf3 : n4++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 5\cf3 : n5++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 6\cf3 : n6++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 default\cf3 :\
                            \
                            \cf6 break\cf3 ;\
                            \
                    \}\
                    \
                \}\
                \
                \cf6 if\cf3  ((n1+n2+n3+n4+n5+n6)!=d)\{ cout << \cf5 "erreur d\'e9s, recommencer programme"\cf3  << endl;\
                    \
                    fin = \cf8 5\cf3 ;\
                    \
                    cout << n1 << n2 << n3 << n4 << n5 << n6 << endl << d;\}\
                \
                \
                \
                \cf6 if\cf3  ((n1>=\cf8 1\cf3 )&&(n2>=\cf8 1\cf3 )&&(n3>=\cf8 1\cf3 )&&(n4>=\cf8 1\cf3 )&&(n5>=\cf8 1\cf3 )&&(n6>=\cf8 1\cf3 )) \{ ptsopt=\cf8 1500\cf3 ; n1--; n2--; n3--; n4--; n5--; n6--; ptopt.push_back(ptsopt); desopt.push_back(\cf8 6\cf3 ); optch.push_back(\cf5 "123456"\cf3 );\}\
                \
                \cf2 //cout << n1 << n2 << n3 << n4 << n5 << n6 << endl << endl; //temp\cf3 \
                \
                \cf6 switch\cf3 (n6) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 600\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 1200\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "6666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 2400\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "66666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 4800\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "666666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 9600\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "6666666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \
                \
                n6 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n5) \{\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        ptsopt=\cf8 50\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        ptsopt=\cf8 50\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5"\cf3 );\
                        \
                        ptsopt=\cf8 50\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 500\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 1000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 2000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "55555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 4000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "555555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 8000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5555555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                n5 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n4) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 400\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 800\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "4444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 1600\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "44444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 3200\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "444444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 6400\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "4444444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                        \
                        \
                \}\
                \
                \
                \
                n4 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n3) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 300\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 600\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "3333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 1200\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "33333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 2400\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "333333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 4800\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "3333333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \
                \
                n3 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n2) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 200\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 400\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "2222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 800\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "22222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 1600\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "222222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 3200\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "2222222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \
                \
                n2 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n1) \{\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        ptsopt=\cf8 100\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        ptsopt=\cf8 100\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1"\cf3 );\
                        \
                        ptsopt=\cf8 100\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 1000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 2000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 4000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "11111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 8000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "111111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 16000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1111111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                n1 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 for\cf3 (a=\cf8 0\cf3 ; a < optch.size(); a++)\{\
                    \
                    \cf6 for\cf3  (b=\cf8 0\cf3 ; b < optch.size(); b++)\{\
                        \
                        \cf6 if\cf3  ((optch[a]==optch[b])&&(a!=l)&&(desopt[a]!=desopt[b])) \{cout << \cf5 "erreur de typewrite!"\cf3 << optch[a] << optch[b] << endl << endl;\} \cf2 // Utile pour verifier si il n'y a pas d'erreur d'ecriture dans le vecteur optch\cf3 \
                        \
                    \}\
                    \
                \}\
                \
                \
                \
                \cf6 if\cf3  (desopt.size()>\cf8 5\cf3 )\{ cout << \cf5 "erreur trop de possibilites"\cf3  << endl;\
                    \
                    desopt.erase(desopt.begin()+\cf8 5\cf3 , desopt.end());\
                    \
                    ptopt.erase(ptopt.begin()+\cf8 5\cf3 , ptopt.end());\
                    \
                    optch.erase(optch.begin()+\cf8 5\cf3 , optch.end());\
                    \
                \}\
                \
                \cf6 if\cf3  (desopt.size() != ptopt.size()) \{ cout << \cf5 "erreur! vecteur des options pas egal a vecteur pts options"\cf3  << endl;\}\
                \
                \cf6 if\cf3  ((desopt.size() == \cf8 0\cf3 ) && (ptopt.size() == \cf8 0\cf3 )) \{ \cf2 //cout << "Bolito a perdu!"<< endl << endl;\cf3 \
                    \
                    p1 = \cf8 0\cf3 ;\
                    \
                    p2 = \cf8 0\cf3 ;\
                    \
                    nd=\cf8 0\cf3 ;\
                    \
                    z=\cf8 1\cf3 ;\
                    \
                    perdu=\cf8 1\cf3 ;\
                    \
                \}\
                \
                \
                \
                \cf6 if\cf3  ((ptopt.size()!=desopt.size())||(desopt.size()!=optch.size()))\{cout << \cf5 "erreur options!!"\cf3  << endl;\}\
                \
                \
                \
                \cf6 switch\cf3 (desopt.size())\{\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 : cout << \cf5 "erreur de lancer de d\'e9s"\cf3  << endl;\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 : cout << \cf5 "erreur de lancer de d\'e9s"\cf3  << endl;\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  l=\cf8 0\cf3 ; l < desopt.size(); l++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  h=\cf8 0\cf3 ; h < desopt.size(); h++)\{\
                                \
                                \cf6 for\cf3  (\cf6 int\cf3  k=\cf8 0\cf3 ; k < desopt.size(); k++)\{\
                                    \
                                    \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                                        \
                                        \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                            \
                                            \cf6 if\cf3 ((l<h)&&(h<k)&&(k<j)&&(j<i))\{\
                                                \
                                                w4 = desopt[i]+desopt[j]+desopt[k]+desopt[h]+desopt[l];\
                                                \
                                                w8 = ptopt[i]+ptopt[j]+ptopt[k]+ptopt[h]+ptopt[l];\
                                                \
                                                w12 = optch[i]+optch[j]+optch[k]+optch[h]+optch[l];\
                                                \
                                                sdesopt.push_back(w4);\
                                                \
                                                sptopt.push_back(w8);\
                                                \
                                                soptch.push_back(w12);\
                                                \
                                            \}\
                                            \
                                        \}\
                                        \
                                    \}\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  h=\cf8 0\cf3 ; h < desopt.size(); h++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  k=\cf8 0\cf3 ; k < desopt.size(); k++)\{\
                                \
                                \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                                    \
                                    \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                        \
                                        \cf6 if\cf3  ((h<k)&&(k<j)&&(j<i))\{\
                                            \
                                            w3 = desopt[i]+desopt[j]+desopt[k]+desopt[h];\
                                            \
                                            w7 = ptopt[i]+ptopt[j]+ptopt[k]+ptopt[h];\
                                            \
                                            w11 = optch[i]+optch[j]+optch[k]+optch[h];\
                                            \
                                            sdesopt.push_back(w3);\
                                            \
                                            sptopt.push_back(w7);\
                                            \
                                            soptch.push_back(w11);\
                                            \
                                        \}\
                                        \
                                    \}\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  k=\cf8 0\cf3 ; k < desopt.size(); k++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                                \
                                \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                    \
                                    \cf6 if\cf3  ((k<j)&&(j<i))\{\
                                        \
                                        w2  = desopt[i]+desopt[j]+desopt[k];\
                                        \
                                        w6 = ptopt[i]+ptopt[j]+ptopt[k];\
                                        \
                                        w10 = optch[i]+optch[j]+optch[k];\
                                        \
                                        sdesopt.push_back(w2);\
                                        \
                                        sptopt.push_back(w6);\
                                        \
                                        soptch.push_back(w10);\
                                        \
                                    \}\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                \
                                \cf6 if\cf3  (j<i)\{\
                                    \
                                    w1 = desopt[i]+desopt[j];\
                                    \
                                    w5 = ptopt[i]+ptopt[j];\
                                    \
                                    w9 = optch[i]+optch[j];\
                                    \
                                    sdesopt.push_back(w1);\
                                    \
                                    sptopt.push_back(w5);\
                                    \
                                    soptch.push_back(w9);\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                            \
                            sdesopt.push_back(desopt[i]);\
                            \
                            sptopt.push_back(ptopt[i]);\
                            \
                            soptch.push_back(optch[i]);\
                            \
                        \}\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \cf6 if\cf3  (sdesopt.size()!=sptopt.size())\{cout << \cf5 "erreur options!"\cf3  << endl;\}\
            \
                \cf6 if\cf3 (perdu!=\cf8 1\cf3 )\{\
                    \
                    p2 = *max_element(sptopt.begin(), sptopt.end()); \cf2 //nombre de points si arret\cf3 \
                    \
                    \cf6 for\cf3 (g=\cf8 0\cf3 ;p2!=sptopt[g];g++)\{\
                        \
                    \}\
                    \
                    \cf2 // nd = nombres de d\'e9s du lancer suivant\cf3 \
                    \
                    \cf2 // d = nombres de d\'e9s lors de ce lancer\cf3 \
                    \
                    \
                    \
                    \cf6 if\cf3  ((ord1<\cf8 1000\cf3 )&&(ord1>=\cf8 0\cf3 )&&(score2meiljo<=\cf8 10000\cf3 ))\{   \cf2 //cas au debut du tour\cf3 \
                        \
                        \cf6 if\cf3 (p1+p2<= \cf8 1000\cf3 )\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e <sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*\cf8 0.8\cf3 ); \cf2 //Vecteur esperance de gain avec chaque option\cf3 \
                              \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\}\
                            nd = (d-sdesopt[i]);\
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \
                            \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                            \
                            p1 = p1+sptopt[i];\
                            p2 = \cf8 0\cf3 ;\
                            d = nd;\
                        \}\
                        \
                        \
                        \
                        \cf6 if\cf3  (p1+p2> \cf8 1000\cf3 )\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*exp(\cf8 1.2\cf3 )); \cf2 //Vecteur esperance de gain avec chaque option\cf3 \
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \
                            \cf6 if\cf3  (maxopt > p2)\{\
                                \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+p2 << " points et " << nd << " d\'e9s."<< endl;\cf3 \
                                \
                                p1 = p1+p2;\
                                \
                                p2 = \cf8 0\cf3 ;\
                                \
                                d = nd;\
                                \
                            \}\
                            \
                            \cf6 if\cf3  (maxopt<= p2)\{\
                                \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " << soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord1=ord1+p1+p2;\
                                \
                                \cf2 //cout << ord1 << " points." << endl;\cf3 \
                                \
                                z = \cf8 1\cf3 ;\
                            \}\
                        \}\
                    \}\
                    \cf6 else\cf3  \cf6 if\cf3  (score2meiljo>\cf8 10000\cf3 )\{\
                        \
                        \cf6 if\cf3  (p1+p2+ord1<=score2meiljo)\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*\cf8 0.8\cf3 );\
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \
                            \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s."<< endl;\cf3 \
                            \
                            p1 = p1+sptopt[i];\
                            \
                            p2 = \cf8 0\cf3 ;\
                            \
                            d = nd;\
                            \
                        \}\
                        \
                        \cf6 if\cf3  (p1+p2+ord1>score2meiljo)\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \cf6 int\cf3  delta10;\
                                delta10 = ord1+p1+p2-score2meiljo;\
                                \cf6 if\cf3 (delta10 >= \cf8 955\cf3 )\{\
                                    \cf6 if\cf3  (nd==\cf8 7\cf3 )\{edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e]));\}\
                                    \cf6 else\cf3 \{edg.push_back(\cf8 0\cf3 );\}\
                                \}\
                                \cf6 else\cf3 \{\
                                    \cf6 if\cf3  ((nd==\cf8 7\cf3 )&&(nd==\cf8 6\cf3 ))\{edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e]));\}\
                                    \cf6 else\cf3 \{edg.push_back(\cf8 0\cf3 );\}\
                                \}\
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                            \}\
                            nd = (d-sdesopt[i]);\
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \cf6 if\cf3  (maxopt > p2)\{\
                                \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                                p1 = p1+sptopt[i];\
                                p2 = \cf8 0\cf3 ;\
                                d = nd;\
                            \}\
                            \
                            \cf6 if\cf3  (maxopt <= p2)\{\
                                \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " <<           soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord1=ord1+p1+p2;\
                                \
                                \cf2 //cout << ord1 << " points." << endl;\cf3 \
                                z = \cf8 1\cf3 ;\
                            \}\
                        \}\
                     \}\
                    \
                    \cf6 else\cf3  \cf6 if\cf3  ((ord1>=\cf8 1000\cf3 )&&(score2meiljo<=\cf8 10000\cf3 )) \{\
                        \
                        \cf6 if\cf3  (ord1 >= score2meiljo)\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])); \cf2 //Vecteur esperance de gain avec chaque option\cf3 \
                                \
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \cf6 if\cf3  (maxopt > p2)\{ \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                                \
                                p1 = p1+sptopt[i];\
                                \
                                p2 = \cf8 0\cf3 ;\
                                \
                                d = nd;\
                                \
                            \}\
                            \
                            \cf6 if\cf3  (maxopt<= p2)\{ \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " << soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord1=ord1+p1+p2;\
                                \
                                \cf2 //cout << ord1 << " points." << endl;\cf3 \
                                \
                                z = \cf8 1\cf3 ;\
                                \
                            \}\
                            \
                            \
                            \
                        \}\
                        \
                        \
                        \
                        \cf6 else\cf3  \cf6 if\cf3  (ord1 < score2meiljo)\{\
                            \
                            \
                            \
                            deltatj = \cf8 1\cf3 +\cf6 int\cf3 ((\cf8 10050\cf3 -score2meiljo)/(ptsmoy[\cf8 7\cf3 ]));\
                            \
                            deltaptt = \cf8 1\cf3  + (\cf8 10050\cf3 -ord1)/(deltatj);\
                            \
                            \
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                \cf6 double\cf3  pond;\
                                pond = exp(-(\cf8 0.5\cf3 )*(((p1+p2-deltaptt)/(deltaptt*\cf8 0.5\cf3 ))*((p1+p2-deltaptt)/(deltaptt*\cf8 0.5\cf3 ))));\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*pond);\
                                \
                            \}\
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \cf6 if\cf3  (maxopt > p2)\{ \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                                \
                                p1 = p1+sptopt[i];\
                                \
                                p2 = \cf8 0\cf3 ;\
                                \
                                d = nd;\
                                \
                            \}\
                            \
                            \cf6 if\cf3  (maxopt <= p2)\{ \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " << soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord1=ord1+p1+p2;\
                                \
                                \cf2 //cout << ord1 << " points." << endl;\cf3 \
                                \
                                z = \cf8 1\cf3 ;\
                            \}\
                        \}\
                    \}\
                    \cf6 else\cf3  \{cout << \cf5 "erreur score ordi!"\cf3  << endl;\}\
                \}\
                \
                perdu=\cf8 0\cf3 ;\
                \
                edg.clear();\
                sptopt.clear();\
                sdesopt.clear();\
                soptch.clear();\
                ptchem.clear();\
                ptopt.clear();\
                desopt.clear();\
                optch.clear();\
                des.clear();\
            \
        \}\
            \cf6 if\cf3 ((ord1>\cf8 10000\cf3 )&&(ord1>score2meiljo))\{\
                vict=\cf8 1\cf3 ;\
            \}\
            z=\cf8 0\cf3 ;\
            p1=\cf8 0\cf3 ;\
            p2=\cf8 0\cf3 ;\
            nd=\cf8 0\cf3 ;\
            d=\cf8 7\cf3 ;\
            score2meiljo = max(ord1, max(ord3, ord4));\
        \cf6 while\cf3 (z==\cf8 0\cf3 )\{            \cf2 //si z=0, le tour continue, si l'ordi s'arrete/perd, z=1 et le tour de l'ordi se termine\cf3 \
                random_device rd;\
                \
                mt19937 mt(rd());    \cf2 // The random number generator using a non-deterministic random device\cf3 \
                \
                uniform_int_distribution<\cf6 int\cf3 > dist(\cf8 1\cf3 ,\cf8 6\cf3 );    \cf2 // The distribution that gives us random numbers in [1,6]\cf3 \
                \
                vector<\cf6 int\cf3 > des;\
                de1=\cf8 0\cf3 , de2=\cf8 0\cf3 , de3=\cf8 0\cf3 , de4=\cf8 0\cf3 , de5=\cf8 0\cf3 , de6=\cf8 0\cf3 , de7=\cf8 0\cf3 ;\
            \
                de1 = dist(mt);\
                \
                de2 = dist(mt);\
                \
                de3 = dist(mt);\
                \
                de4 = dist(mt);\
                \
                de5 = dist(mt);\
                \
                de6 = dist(mt);\
                \
                de7 = dist(mt);\
                \
                \cf6 switch\cf3 (d)\{\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        des.push_back (de7);\
                        \
                        des.push_back (de6);\
                        \
                        des.push_back (de5);\
                        \
                        des.push_back (de4);\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4 << de5 << de6 << de7;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        des.push_back (de6);\
                        \
                        des.push_back (de5);\
                        \
                        des.push_back (de4);\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4 << de5 << de6;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        des.push_back (de5);\
                        \
                        des.push_back (de4);\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4 << de5;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        des.push_back (de4);\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \cf6 for\cf3 (m=\cf8 0\cf3 ; m<des.size(); m++)\{\
                    \
                    \cf6 while\cf3 ((des[m]<=\cf8 0\cf3 )||(des[m]>\cf8 6\cf3 ))\{\
                        \
                        cout << \cf5 "Il y a une erreur dans l'entr\'e9e des d\'e9s, veuillez r\'e9ecrire le/les d\'e9(s) erron\'e9"\cf3  << endl;\
                        \
                        cin >> des[m];\
                        \
                    \}\
                \}\
                \
                \cf6 for\cf3  (i=\cf8 0\cf3 ; i<des.size(); i++)\{\
                    \
                    \
                    \
                    \cf6 switch\cf3  (des[i])\{\
                            \
                        \cf6 case\cf3  \cf8 1\cf3 : n1++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 2\cf3 : n2++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 3\cf3 : n3++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 4\cf3 : n4++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 5\cf3 : n5++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 6\cf3 : n6++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 default\cf3 :\
                            \
                            \cf6 break\cf3 ;\
                            \
                    \}\
                    \
                \}\
                \
                \cf6 if\cf3  ((n1+n2+n3+n4+n5+n6)!=d)\{ cout << \cf5 "erreur d\'e9s, recommencer programme"\cf3  << endl;\
                    \
                    fin = \cf8 5\cf3 ;\
                    \
                    cout << n1 << n2 << n3 << n4 << n5 << n6 << endl << d;\}\
                \
                \
                \
                \cf6 if\cf3  ((n1>=\cf8 1\cf3 )&&(n2>=\cf8 1\cf3 )&&(n3>=\cf8 1\cf3 )&&(n4>=\cf8 1\cf3 )&&(n5>=\cf8 1\cf3 )&&(n6>=\cf8 1\cf3 )) \{ ptsopt=\cf8 1500\cf3 ; n1--; n2--; n3--; n4--; n5--; n6--; ptopt.push_back(ptsopt); desopt.push_back(\cf8 6\cf3 ); optch.push_back(\cf5 "123456"\cf3 );\}\
                \
                \cf2 //cout << n1 << n2 << n3 << n4 << n5 << n6 << endl << endl; //temp\cf3 \
                \
                \cf6 switch\cf3 (n6) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 600\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 1200\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "6666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 2400\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "66666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 4800\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "666666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 9600\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "6666666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \
                \
                n6 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n5) \{\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        ptsopt=\cf8 50\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        ptsopt=\cf8 50\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5"\cf3 );\
                        \
                        ptsopt=\cf8 50\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 500\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 1000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 2000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "55555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 4000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "555555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 8000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5555555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                n5 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n4) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 400\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 800\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "4444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 1600\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "44444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 3200\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "444444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 6400\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "4444444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                        \
                        \
                \}\
                \
                \
                \
                n4 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n3) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 300\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 600\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "3333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 1200\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "33333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 2400\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "333333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 4800\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "3333333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \
                \
                n3 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n2) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 200\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 400\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "2222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 800\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "22222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 1600\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "222222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 3200\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "2222222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \
                \
                n2 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n1) \{\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        ptsopt=\cf8 100\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        ptsopt=\cf8 100\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1"\cf3 );\
                        \
                        ptsopt=\cf8 100\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 1000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 2000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 4000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "11111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 8000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "111111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 16000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1111111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                n1 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 for\cf3 (a=\cf8 0\cf3 ; a < optch.size(); a++)\{\
                    \
                    \cf6 for\cf3  (b=\cf8 0\cf3 ; b < optch.size(); b++)\{\
                        \
                        \cf6 if\cf3  ((optch[a]==optch[b])&&(a!=l)&&(desopt[a]!=desopt[b])) \{cout << \cf5 "erreur de typewrite!"\cf3 << optch[a] << optch[b] << endl << endl;\} \cf2 // Utile pour verifier si il n'y a pas d'erreur d'ecriture dans le vecteur optch\cf3 \
                        \
                    \}\
                    \
                \}\
                \
                \
                \
                \cf6 if\cf3  (desopt.size()>\cf8 5\cf3 )\{ cout << \cf5 "erreur trop de possibilites"\cf3  << endl;\
                    \
                    desopt.erase(desopt.begin()+\cf8 5\cf3 , desopt.end());\
                    \
                    ptopt.erase(ptopt.begin()+\cf8 5\cf3 , ptopt.end());\
                    \
                    optch.erase(optch.begin()+\cf8 5\cf3 , optch.end());\
                    \
                \}\
                \
                \cf6 if\cf3  (desopt.size() != ptopt.size()) \{ cout << \cf5 "erreur! vecteur des options pas egal a vecteur pts options"\cf3  << endl;\}\
                \
                \cf6 if\cf3  ((desopt.size() == \cf8 0\cf3 ) && (ptopt.size() == \cf8 0\cf3 )) \{ \cf2 //cout << "Bolito a perdu!"<< endl << endl;\cf3 \
                    \
                    p1 = \cf8 0\cf3 ;\
                    \
                    p2 = \cf8 0\cf3 ;\
                    \
                    nd=\cf8 0\cf3 ;\
                    \
                    z=\cf8 1\cf3 ;\
                    \
                    perdu=\cf8 1\cf3 ;\
                    \
                \}\
                \
                \
                \
                \cf6 if\cf3  ((ptopt.size()!=desopt.size())||(desopt.size()!=optch.size()))\{cout << \cf5 "erreur options!!"\cf3  << endl;\}\
                \
                \
                \
                \cf6 switch\cf3 (desopt.size())\{\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 : cout << \cf5 "erreur de lancer de d\'e9s"\cf3  << endl;\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 : cout << \cf5 "erreur de lancer de d\'e9s"\cf3  << endl;\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  l=\cf8 0\cf3 ; l < desopt.size(); l++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  h=\cf8 0\cf3 ; h < desopt.size(); h++)\{\
                                \
                                \cf6 for\cf3  (\cf6 int\cf3  k=\cf8 0\cf3 ; k < desopt.size(); k++)\{\
                                    \
                                    \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                                        \
                                        \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                            \
                                            \cf6 if\cf3 ((l<h)&&(h<k)&&(k<j)&&(j<i))\{\
                                                \
                                                w4 = desopt[i]+desopt[j]+desopt[k]+desopt[h]+desopt[l];\
                                                \
                                                w8 = ptopt[i]+ptopt[j]+ptopt[k]+ptopt[h]+ptopt[l];\
                                                \
                                                w12 = optch[i]+optch[j]+optch[k]+optch[h]+optch[l];\
                                                \
                                                sdesopt.push_back(w4);\
                                                \
                                                sptopt.push_back(w8);\
                                                \
                                                soptch.push_back(w12);\
                                                \
                                            \}\
                                            \
                                        \}\
                                        \
                                    \}\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  h=\cf8 0\cf3 ; h < desopt.size(); h++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  k=\cf8 0\cf3 ; k < desopt.size(); k++)\{\
                                \
                                \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                                    \
                                    \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                        \
                                        \cf6 if\cf3  ((h<k)&&(k<j)&&(j<i))\{\
                                            \
                                            w3 = desopt[i]+desopt[j]+desopt[k]+desopt[h];\
                                            \
                                            w7 = ptopt[i]+ptopt[j]+ptopt[k]+ptopt[h];\
                                            \
                                            w11 = optch[i]+optch[j]+optch[k]+optch[h];\
                                            \
                                            sdesopt.push_back(w3);\
                                            \
                                            sptopt.push_back(w7);\
                                            \
                                            soptch.push_back(w11);\
                                            \
                                        \}\
                                        \
                                    \}\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  k=\cf8 0\cf3 ; k < desopt.size(); k++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                                \
                                \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                    \
                                    \cf6 if\cf3  ((k<j)&&(j<i))\{\
                                        \
                                        w2  = desopt[i]+desopt[j]+desopt[k];\
                                        \
                                        w6 = ptopt[i]+ptopt[j]+ptopt[k];\
                                        \
                                        w10 = optch[i]+optch[j]+optch[k];\
                                        \
                                        sdesopt.push_back(w2);\
                                        \
                                        sptopt.push_back(w6);\
                                        \
                                        soptch.push_back(w10);\
                                        \
                                    \}\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                \
                                \cf6 if\cf3  (j<i)\{\
                                    \
                                    w1 = desopt[i]+desopt[j];\
                                    \
                                    w5 = ptopt[i]+ptopt[j];\
                                    \
                                    w9 = optch[i]+optch[j];\
                                    \
                                    sdesopt.push_back(w1);\
                                    \
                                    sptopt.push_back(w5);\
                                    \
                                    soptch.push_back(w9);\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                            \
                            sdesopt.push_back(desopt[i]);\
                            \
                            sptopt.push_back(ptopt[i]);\
                            \
                            soptch.push_back(optch[i]);\
                            \
                        \}\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \cf6 if\cf3  (sdesopt.size()!=sptopt.size())\{cout << \cf5 "erreur options!"\cf3  << endl;\}\
                \
                \cf6 if\cf3 (perdu!=\cf8 1\cf3 )\{\
                    \
                    p2 = *max_element(sptopt.begin(), sptopt.end()); \cf2 //nombre de points si arret\cf3 \
                    \
                    \cf6 for\cf3 (g=\cf8 0\cf3 ;p2!=sptopt[g];g++)\{\
                        \
                    \}\
                    \
                    \cf2 // nd = nombres de d\'e9s du lancer suivant\cf3 \
                    \
                    \cf2 // d = nombres de d\'e9s lors de ce lancer\cf3 \
                    \
                    \
                    \
                    \cf6 if\cf3  ((ord2<\cf8 1000\cf3 )&&(ord2>=\cf8 0\cf3 )&&(score2meiljo<=\cf8 10000\cf3 ))\{   \cf2 //cas au debut du tour\cf3 \
                        \
                        \cf6 if\cf3 (p1+p2<= \cf8 1000\cf3 )\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*\cf8 0.8\cf3 ); \cf2 //Vecteur esperance de gain avec chaque option\cf3 \
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\}\
                            nd = (d-sdesopt[i]);\
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \
                            \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                            \
                            p1 = p1+sptopt[i];\
                            p2 = \cf8 0\cf3 ;\
                            d = nd;\
                        \}\
                        \
                        \
                        \
                        \cf6 if\cf3  (p1+p2> \cf8 1000\cf3 )\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*exp(\cf8 1.2\cf3 )); \cf2 //Vecteur esperance de gain avec chaque option\cf3 \
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \
                            \cf6 if\cf3  (maxopt > p2)\{\
                                \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+p2 << " points et " << nd << " d\'e9s."<< endl;\cf3 \
                                \
                                p1 = p1+p2;\
                                \
                                p2 = \cf8 0\cf3 ;\
                                \
                                d = nd;\
                                \
                            \}\
                            \
                            \cf6 if\cf3  (maxopt<= p2)\{\
                                \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " << soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord2=ord2+p1+p2;\
                                \
                                \cf2 //cout << ord2 << " points." << endl;\cf3 \
                                \
                                z = \cf8 1\cf3 ;\
                            \}\
                        \}\
                    \}\
                    \cf6 else\cf3  \cf6 if\cf3  (score2meiljo>\cf8 10000\cf3 )\{\
                        \
                        \cf6 if\cf3  (p1+p2+ord2<=score2meiljo)\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*\cf8 0.8\cf3 );\
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \
                            \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s."<< endl;\cf3 \
                            \
                            p1 = p1+sptopt[i];\
                            \
                            p2 = \cf8 0\cf3 ;\
                            \
                            d = nd;\
                            \
                        \}\
                        \
                        \cf6 if\cf3  (p1+p2+ord2>score2meiljo)\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \cf6 int\cf3  delta10;\
                                delta10 = ord2+p1+p2-score2meiljo;\
                                \cf6 if\cf3 (delta10 >= \cf8 955\cf3 )\{\
                                    \cf6 if\cf3  (nd==\cf8 7\cf3 )\{edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e]));\}\
                                    \cf6 else\cf3 \{edg.push_back(\cf8 0\cf3 );\}\
                                \}\
                                \cf6 else\cf3 \{\
                                    \cf6 if\cf3  ((nd==\cf8 7\cf3 )&&(nd==\cf8 6\cf3 ))\{edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e]));\}\
                                    \cf6 else\cf3 \{edg.push_back(\cf8 0\cf3 );\}\
                                \}\
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                            \}\
                            nd = (d-sdesopt[i]);\
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \cf6 if\cf3  (maxopt > p2)\{\
                                \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                                p1 = p1+sptopt[i];\
                                p2 = \cf8 0\cf3 ;\
                                d = nd;\
                            \}\
                            \
                            \cf6 if\cf3  (maxopt <= p2)\{\
                                \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " <<           soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord2=ord2+p1+p2;\
                                \
                                \cf2 //cout << ord2 << " points." << endl;\cf3 \
                                z = \cf8 1\cf3 ;\
                            \}\
                        \}\
                    \}\
                    \
                    \cf6 else\cf3  \cf6 if\cf3  ((ord2>=\cf8 1000\cf3 )&&(score2meiljo<=\cf8 10000\cf3 )) \{\
                        \
                        \cf6 if\cf3  (ord2 >= score2meiljo)\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])); \cf2 //Vecteur esperance de gain avec chaque option\cf3 \
                                \
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \cf6 if\cf3  (maxopt > p2)\{ \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                                \
                                p1 = p1+sptopt[i];\
                                \
                                p2 = \cf8 0\cf3 ;\
                                \
                                d = nd;\
                                \
                            \}\
                            \
                            \cf6 if\cf3  (maxopt<= p2)\{ \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " << soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord2=ord2+p1+p2;\
                                \
                                \cf2 //cout << ord2 << " points." << endl;\cf3 \
                                \
                                z = \cf8 1\cf3 ;\
                                \
                            \}\
                            \
                            \
                            \
                        \}\
                        \
                        \
                        \
                        \cf6 else\cf3  \cf6 if\cf3  (ord2 < score2meiljo)\{\
                            \
                            \
                            \
                            deltatj = \cf8 1\cf3 +\cf6 int\cf3 ((\cf8 10050\cf3 -score2meiljo)/(ptsmoy[\cf8 7\cf3 ]));\
                            \
                            deltaptt = \cf8 1\cf3  + (\cf8 10050\cf3 -ord2)/(deltatj);\
                            \
                            \
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                \cf6 double\cf3  pond;\
                                pond = exp(-(\cf8 0.5\cf3 )*(((p1+p2-deltaptt)/(deltaptt*\cf8 0.5\cf3 ))*((p1+p2-deltaptt)/(deltaptt*\cf8 0.5\cf3 ))));\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*pond);\
                                \
                            \}\
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \cf6 if\cf3  (maxopt > p2)\{ \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                                \
                                p1 = p1+sptopt[i];\
                                \
                                p2 = \cf8 0\cf3 ;\
                                \
                                d = nd;\
                                \
                            \}\
                            \
                            \cf6 if\cf3  (maxopt <= p2)\{ \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " << soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord2=ord2+p1+p2;\
                                \
                                \cf2 //cout << ord2 << " points." << endl;\cf3 \
                                \
                                z = \cf8 1\cf3 ;\
                            \}\
                        \}\
                    \}\
                    \cf6 else\cf3  \{cout << \cf5 "erreur score ordi!"\cf3  << endl;\}\
                    \
                \}\
                \
                perdu=\cf8 0\cf3 ;\
                \
                edg.clear();\
                sptopt.clear();\
                sdesopt.clear();\
                soptch.clear();\
                ptchem.clear();\
                ptopt.clear();\
                desopt.clear();\
                optch.clear();\
                des.clear();\
                \
        \}\
            \cf6 if\cf3 ((ord2>\cf8 10000\cf3 )&&(ord2>score2meiljo))\{\
                vict=\cf8 2\cf3 ;\
            \}\
            z=\cf8 0\cf3 ;\
            p1=\cf8 0\cf3 ;\
            p2=\cf8 0\cf3 ;\
            nd=\cf8 0\cf3 ;\
            d=\cf8 7\cf3 ;\
               score2meiljo = max(ord1, max(ord2, ord4));\
        \cf6 while\cf3 (z==\cf8 0\cf3 )\{            \cf2 //si z=0, le tour continue, si l'ordi s'arrete/perd, z=1 et le tour de l'ordi se termine\cf3 \
                random_device rd;\
                mt19937 mt(rd());    \cf2 // The random number generator using a non-deterministic random device\cf3 \
                \
                uniform_int_distribution<\cf6 int\cf3 > dist(\cf8 1\cf3 ,\cf8 6\cf3 );    \cf2 // The distribution that gives us random numbers in [1,6]\cf3 \
                \
                vector<\cf6 int\cf3 > des;\
                de1=\cf8 0\cf3 , de2=\cf8 0\cf3 , de3=\cf8 0\cf3 , de4=\cf8 0\cf3 , de5=\cf8 0\cf3 , de6=\cf8 0\cf3 , de7=\cf8 0\cf3 ;\
            \
                \
                de1 = dist(mt);\
                \
                de2 = dist(mt);\
                \
                de3 = dist(mt);\
                \
                de4 = dist(mt);\
                \
                de5 = dist(mt);\
                \
                de6 = dist(mt);\
                \
                de7 = dist(mt);\
                \
                \cf6 switch\cf3 (d)\{\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        des.push_back (de7);\
                        \
                        des.push_back (de6);\
                        \
                        des.push_back (de5);\
                        \
                        des.push_back (de4);\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4 << de5 << de6 << de7;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        des.push_back (de6);\
                        \
                        des.push_back (de5);\
                        \
                        des.push_back (de4);\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4 << de5 << de6;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        des.push_back (de5);\
                        \
                        des.push_back (de4);\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4 << de5;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        des.push_back (de4);\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
            \
                \cf6 for\cf3 (m=\cf8 0\cf3 ; m<des.size(); m++)\{\
                    \
                    \cf6 while\cf3 ((des[m]<=\cf8 0\cf3 )||(des[m]>\cf8 6\cf3 ))\{\
                        \
                        cout << \cf5 "Il y a une erreur dans l'entr\'e9e des d\'e9s, veuillez r\'e9ecrire le/les d\'e9(s) erron\'e9"\cf3  << endl;\
                        \
                        cin >> des[m];\
                        \
                    \}\
                \}\
                \
                \cf6 for\cf3  (i=\cf8 0\cf3 ; i<des.size(); i++)\{\
                    \
                    \
                    \
                    \cf6 switch\cf3  (des[i])\{\
                            \
                        \cf6 case\cf3  \cf8 1\cf3 : n1++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 2\cf3 : n2++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 3\cf3 : n3++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 4\cf3 : n4++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 5\cf3 : n5++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 6\cf3 : n6++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 default\cf3 :\
                            \
                            \cf6 break\cf3 ;\
                            \
                    \}\
                    \
                \}\
                \
                \cf6 if\cf3  ((n1+n2+n3+n4+n5+n6)!=d)\{ cout << \cf5 "erreur d\'e9s, recommencer programme"\cf3  << endl;\
                    \
                    fin = \cf8 5\cf3 ;\
                    \
                    cout << n1 << n2 << n3 << n4 << n5 << n6 << endl << d;\}\
                \
                \
                \
                \cf6 if\cf3  ((n1>=\cf8 1\cf3 )&&(n2>=\cf8 1\cf3 )&&(n3>=\cf8 1\cf3 )&&(n4>=\cf8 1\cf3 )&&(n5>=\cf8 1\cf3 )&&(n6>=\cf8 1\cf3 )) \{ ptsopt=\cf8 1500\cf3 ; n1--; n2--; n3--; n4--; n5--; n6--; ptopt.push_back(ptsopt); desopt.push_back(\cf8 6\cf3 ); optch.push_back(\cf5 "123456"\cf3 );\}\
                \
                \cf2 //cout << n1 << n2 << n3 << n4 << n5 << n6 << endl << endl; //temp\cf3 \
                \
                \cf6 switch\cf3 (n6) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 600\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 1200\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "6666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 2400\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "66666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 4800\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "666666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 9600\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "6666666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \
                \
                n6 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n5) \{\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        ptsopt=\cf8 50\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        ptsopt=\cf8 50\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5"\cf3 );\
                        \
                        ptsopt=\cf8 50\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 500\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 1000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 2000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "55555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 4000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "555555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 8000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5555555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                n5 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n4) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 400\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 800\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "4444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 1600\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "44444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 3200\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "444444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 6400\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "4444444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                        \
                        \
                \}\
                \
                \
                \
                n4 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n3) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 300\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 600\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "3333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 1200\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "33333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 2400\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "333333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 4800\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "3333333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \
                \
                n3 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n2) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 200\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 400\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "2222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 800\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "22222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 1600\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "222222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 3200\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "2222222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \
                \
                n2 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n1) \{\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        ptsopt=\cf8 100\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        ptsopt=\cf8 100\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1"\cf3 );\
                        \
                        ptsopt=\cf8 100\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 1000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 2000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 4000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "11111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 8000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "111111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 16000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1111111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                n1 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 for\cf3 (a=\cf8 0\cf3 ; a < optch.size(); a++)\{\
                    \
                    \cf6 for\cf3  (b=\cf8 0\cf3 ; b < optch.size(); b++)\{\
                        \
                        \cf6 if\cf3  ((optch[a]==optch[b])&&(a!=l)&&(desopt[a]!=desopt[b])) \{cout << \cf5 "erreur de typewrite!"\cf3 << optch[a] << optch[b] << endl << endl;\} \cf2 // Utile pour verifier si il n'y a pas d'erreur d'ecriture dans le vecteur optch\cf3 \
                        \
                    \}\
                    \
                \}\
                \
                \
                \
                \cf6 if\cf3  (desopt.size()>\cf8 5\cf3 )\{ cout << \cf5 "erreur trop de possibilites"\cf3  << endl;\
                    \
                    desopt.erase(desopt.begin()+\cf8 5\cf3 , desopt.end());\
                    \
                    ptopt.erase(ptopt.begin()+\cf8 5\cf3 , ptopt.end());\
                    \
                    optch.erase(optch.begin()+\cf8 5\cf3 , optch.end());\
                    \
                \}\
                \
                \cf6 if\cf3  (desopt.size() != ptopt.size()) \{ cout << \cf5 "erreur! vecteur des options pas egal a vecteur pts options"\cf3  << endl;\}\
                \
                \cf6 if\cf3  ((desopt.size() == \cf8 0\cf3 ) && (ptopt.size() == \cf8 0\cf3 )) \{ \cf2 //cout << "Bolito a perdu!"<< endl << endl;\cf3 \
                    \
                    p1 = \cf8 0\cf3 ;\
                    \
                    p2 = \cf8 0\cf3 ;\
                    \
                    nd=\cf8 0\cf3 ;\
                    \
                    z=\cf8 1\cf3 ;\
                    \
                    perdu=\cf8 1\cf3 ;\
                    \
                \}\
                \
                \
                \
                \cf6 if\cf3  ((ptopt.size()!=desopt.size())||(desopt.size()!=optch.size()))\{cout << \cf5 "erreur options!!"\cf3  << endl;\}\
                \
                \
                \
                \cf6 switch\cf3 (desopt.size())\{\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 : cout << \cf5 "erreur de lancer de d\'e9s"\cf3  << endl;\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 : cout << \cf5 "erreur de lancer de d\'e9s"\cf3  << endl;\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  l=\cf8 0\cf3 ; l < desopt.size(); l++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  h=\cf8 0\cf3 ; h < desopt.size(); h++)\{\
                                \
                                \cf6 for\cf3  (\cf6 int\cf3  k=\cf8 0\cf3 ; k < desopt.size(); k++)\{\
                                    \
                                    \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                                        \
                                        \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                            \
                                            \cf6 if\cf3 ((l<h)&&(h<k)&&(k<j)&&(j<i))\{\
                                                \
                                                w4 = desopt[i]+desopt[j]+desopt[k]+desopt[h]+desopt[l];\
                                                \
                                                w8 = ptopt[i]+ptopt[j]+ptopt[k]+ptopt[h]+ptopt[l];\
                                                \
                                                w12 = optch[i]+optch[j]+optch[k]+optch[h]+optch[l];\
                                                \
                                                sdesopt.push_back(w4);\
                                                \
                                                sptopt.push_back(w8);\
                                                \
                                                soptch.push_back(w12);\
                                                \
                                            \}\
                                            \
                                        \}\
                                        \
                                    \}\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  h=\cf8 0\cf3 ; h < desopt.size(); h++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  k=\cf8 0\cf3 ; k < desopt.size(); k++)\{\
                                \
                                \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                                    \
                                    \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                        \
                                        \cf6 if\cf3  ((h<k)&&(k<j)&&(j<i))\{\
                                            \
                                            w3 = desopt[i]+desopt[j]+desopt[k]+desopt[h];\
                                            \
                                            w7 = ptopt[i]+ptopt[j]+ptopt[k]+ptopt[h];\
                                            \
                                            w11 = optch[i]+optch[j]+optch[k]+optch[h];\
                                            \
                                            sdesopt.push_back(w3);\
                                            \
                                            sptopt.push_back(w7);\
                                            \
                                            soptch.push_back(w11);\
                                            \
                                        \}\
                                        \
                                    \}\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  k=\cf8 0\cf3 ; k < desopt.size(); k++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                                \
                                \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                    \
                                    \cf6 if\cf3  ((k<j)&&(j<i))\{\
                                        \
                                        w2  = desopt[i]+desopt[j]+desopt[k];\
                                        \
                                        w6 = ptopt[i]+ptopt[j]+ptopt[k];\
                                        \
                                        w10 = optch[i]+optch[j]+optch[k];\
                                        \
                                        sdesopt.push_back(w2);\
                                        \
                                        sptopt.push_back(w6);\
                                        \
                                        soptch.push_back(w10);\
                                        \
                                    \}\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                \
                                \cf6 if\cf3  (j<i)\{\
                                    \
                                    w1 = desopt[i]+desopt[j];\
                                    \
                                    w5 = ptopt[i]+ptopt[j];\
                                    \
                                    w9 = optch[i]+optch[j];\
                                    \
                                    sdesopt.push_back(w1);\
                                    \
                                    sptopt.push_back(w5);\
                                    \
                                    soptch.push_back(w9);\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                            \
                            sdesopt.push_back(desopt[i]);\
                            \
                            sptopt.push_back(ptopt[i]);\
                            \
                            soptch.push_back(optch[i]);\
                            \
                        \}\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \cf6 if\cf3  (sdesopt.size()!=sptopt.size())\{cout << \cf5 "erreur options!"\cf3  << endl;\}\
                \
                \cf6 if\cf3 (perdu!=\cf8 1\cf3 )\{\
                    \
                    p2 = *max_element(sptopt.begin(), sptopt.end()); \cf2 //nombre de points si arret\cf3 \
                    \
                    \cf6 for\cf3 (g=\cf8 0\cf3 ;p2!=sptopt[g];g++)\{\
                        \
                    \}\
                    \
                    \cf2 // nd = nombres de d\'e9s du lancer suivant\cf3 \
                    \
                    \cf2 // d = nombres de d\'e9s lors de ce lancer\cf3 \
                    \
                    \
                    \
                    \cf6 if\cf3  ((ord3<\cf8 1000\cf3 )&&(ord3>=\cf8 0\cf3 )&&(score2meiljo<=\cf8 10000\cf3 ))\{   \cf2 //cas au debut du tour\cf3 \
                        \
                        \cf6 if\cf3 (p1+p2<= \cf8 1000\cf3 )\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*\cf8 0.8\cf3 ); \cf2 //Vecteur esperance de gain avec chaque option\cf3 \
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\}\
                            nd = (d-sdesopt[i]);\
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \
                            \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                            \
                            p1 = p1+sptopt[i];\
                            p2 = \cf8 0\cf3 ;\
                            d = nd;\
                        \}\
                        \
                        \
                        \
                        \cf6 if\cf3  (p1+p2> \cf8 1000\cf3 )\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*exp(\cf8 1.2\cf3 )); \cf2 //Vecteur esperance de gain avec chaque option\cf3 \
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \
                            \cf6 if\cf3  (maxopt > p2)\{\
                                \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+p2 << " points et " << nd << " d\'e9s."<< endl;\cf3 \
                                \
                                p1 = p1+p2;\
                                \
                                p2 = \cf8 0\cf3 ;\
                                \
                                d = nd;\
                                \
                            \}\
                            \
                            \cf6 if\cf3  (maxopt<= p2)\{\
                                \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " << soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord3=ord3+p1+p2;\
                                \
                                \cf2 //cout << ord3 << " points." << endl;\cf3 \
                                \
                                z = \cf8 1\cf3 ;\
                            \}\
                        \}\
                    \}\
                    \cf6 else\cf3  \cf6 if\cf3  (score2meiljo>\cf8 10000\cf3 )\{\
                        \
                        \cf6 if\cf3  (p1+p2+ord3<=score2meiljo)\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*\cf8 0.8\cf3 );\
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \
                            \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s."<< endl;\cf3 \
                            \
                            p1 = p1+sptopt[i];\
                            \
                            p2 = \cf8 0\cf3 ;\
                            \
                            d = nd;\
                            \
                        \}\
                        \
                        \cf6 if\cf3  (p1+p2+ord3>score2meiljo)\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \cf6 int\cf3  delta10;\
                                delta10 = ord3+p1+p2-score2meiljo;\
                                \cf6 if\cf3 (delta10 >= \cf8 955\cf3 )\{\
                                    \cf6 if\cf3  (nd==\cf8 7\cf3 )\{edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e]));\}\
                                    \cf6 else\cf3 \{edg.push_back(\cf8 0\cf3 );\}\
                                \}\
                                \cf6 else\cf3 \{\
                                    \cf6 if\cf3  ((nd==\cf8 7\cf3 )&&(nd==\cf8 6\cf3 ))\{edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e]));\}\
                                    \cf6 else\cf3 \{edg.push_back(\cf8 0\cf3 );\}\
                                \}\
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                            \}\
                            nd = (d-sdesopt[i]);\
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \cf6 if\cf3  (maxopt > p2)\{\
                                \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                                p1 = p1+sptopt[i];\
                                p2 = \cf8 0\cf3 ;\
                                d = nd;\
                            \}\
                            \
                            \cf6 if\cf3  (maxopt <= p2)\{\
                                \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " <<           soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord3=ord3+p1+p2;\
                                \
                                \cf2 //cout << ord3 << " points." << endl;\cf3 \
                                z = \cf8 1\cf3 ;\
                            \}\
                        \}\
                    \}\
                    \
                    \cf6 else\cf3  \cf6 if\cf3  ((ord3>=\cf8 1000\cf3 )&&(score2meiljo<=\cf8 10000\cf3 )) \{\
                        \
                        \cf6 if\cf3  (ord3 >= score2meiljo)\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])); \cf2 //Vecteur esperance de gain avec chaque option\cf3 \
                                \
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \cf6 if\cf3  (maxopt > p2)\{ \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                                \
                                p1 = p1+sptopt[i];\
                                \
                                p2 = \cf8 0\cf3 ;\
                                \
                                d = nd;\
                                \
                            \}\
                            \
                            \cf6 if\cf3  (maxopt<= p2)\{ \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " << soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord3=ord3+p1+p2;\
                                \
                                \cf2 //cout << ord3 << " points." << endl;\cf3 \
                                \
                                z = \cf8 1\cf3 ;\
                                \
                            \}\
                            \
                            \
                            \
                        \}\
                        \
                        \
                        \
                        \cf6 else\cf3  \cf6 if\cf3  (ord3 < score2meiljo)\{\
                            \
                            \
                            \
                            deltatj = \cf8 1\cf3 +\cf6 int\cf3 ((\cf8 10050\cf3 -score2meiljo)/(ptsmoy[\cf8 7\cf3 ]));\
                            \
                            deltaptt = \cf8 1\cf3  + (\cf8 10050\cf3 -ord3)/(deltatj);\
                            \
                            \
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                \cf6 double\cf3  pond;\
                                pond = exp(-(\cf8 0.5\cf3 )*(((p1+p2-deltaptt)/(deltaptt*\cf8 0.5\cf3 ))*((p1+p2-deltaptt)/(deltaptt*\cf8 0.5\cf3 ))));\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*pond);\
                                \
                            \}\
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \cf6 if\cf3  (maxopt > p2)\{ \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                                \
                                p1 = p1+sptopt[i];\
                                \
                                p2 = \cf8 0\cf3 ;\
                                \
                                d = nd;\
                                \
                            \}\
                            \
                            \cf6 if\cf3  (maxopt <= p2)\{ \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " << soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord3=ord3+p1+p2;\
                                \
                                \cf2 //cout << ord3 << " points." << endl;\cf3 \
                                \
                                z = \cf8 1\cf3 ;\
                            \}\
                        \}\
                    \}\
                    \cf6 else\cf3  \{cout << \cf5 "erreur score ordi!"\cf3  << endl;\}\
                \}\
                \
                perdu=\cf8 0\cf3 ;\
                \
                edg.clear();\
                sptopt.clear();\
                sdesopt.clear();\
                soptch.clear();\
                ptchem.clear();\
                ptopt.clear();\
                desopt.clear();\
                optch.clear();\
                des.clear();\
                \
        \}\
            \cf6 if\cf3 ((ord3>\cf8 10000\cf3 )&&(ord3>score2meiljo))\{\
                vict=\cf8 3\cf3 ;\
            \}\
            z=\cf8 0\cf3 ;\
            p1=\cf8 0\cf3 ;\
            p2=\cf8 0\cf3 ;\
            nd=\cf8 0\cf3 ;\
            d=\cf8 7\cf3 ;\
               score2meiljo = max(ord1, max(ord2, ord3));\
        \cf6 while\cf3 (z==\cf8 0\cf3 )\{            \cf2 //si z=0, le tour continue, si l'ordi s'arrete/perd, z=1 et le tour de l'ordi se termine\cf3 \
                random_device rd;\
                mt19937 mt(rd());    \cf2 // The random number generator using a non-deterministic random device\cf3 \
                \
                uniform_int_distribution<\cf6 int\cf3 > dist(\cf8 1\cf3 ,\cf8 6\cf3 );    \cf2 // The distribution that gives us random numbers in [1,6]\cf3 \
                \
                vector<\cf6 int\cf3 > des;\
                de1=\cf8 0\cf3 , de2=\cf8 0\cf3 , de3=\cf8 0\cf3 , de4=\cf8 0\cf3 , de5=\cf8 0\cf3 , de6=\cf8 0\cf3 , de7=\cf8 0\cf3 ;\
            \
                \
                de1 = dist(mt);\
                \
                de2 = dist(mt);\
                \
                de3 = dist(mt);\
                \
                de4 = dist(mt);\
                \
                de5 = dist(mt);\
                \
                de6 = dist(mt);\
                \
                de7 = dist(mt);\
                \
                \cf6 switch\cf3 (d)\{\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        des.push_back (de7);\
                        \
                        des.push_back (de6);\
                        \
                        des.push_back (de5);\
                        \
                        des.push_back (de4);\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4 << de5 << de6 << de7;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        des.push_back (de6);\
                        \
                        des.push_back (de5);\
                        \
                        des.push_back (de4);\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4 << de5 << de6;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        des.push_back (de5);\
                        \
                        des.push_back (de4);\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4 << de5;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        des.push_back (de4);\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3 << de4;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        des.push_back (de3);\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2 << de3;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        des.push_back (de2);\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1 << de2;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        des.push_back (de1);\
                        \
                        \cf2 //cout << "J'ai tir\'e9 la s\'e9quence suivante: " << de1;\cf3 \
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \cf6 for\cf3 (m=\cf8 0\cf3 ; m<des.size(); m++)\{\
                    \
                    \cf6 while\cf3 ((des[m]<=\cf8 0\cf3 )||(des[m]>\cf8 6\cf3 ))\{\
                        \
                        cout << \cf5 "Il y a une erreur dans l'entr\'e9e des d\'e9s, veuillez r\'e9ecrire le/les d\'e9(s) erron\'e9"\cf3  << endl;\
                        \
                        cin >> des[m];\
                        \
                    \}\
                \}\
                \
                \cf6 for\cf3  (i=\cf8 0\cf3 ; i<des.size(); i++)\{\
                    \
                    \
                    \
                    \cf6 switch\cf3  (des[i])\{\
                            \
                        \cf6 case\cf3  \cf8 1\cf3 : n1++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 2\cf3 : n2++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 3\cf3 : n3++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 4\cf3 : n4++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 5\cf3 : n5++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 case\cf3  \cf8 6\cf3 : n6++;\
                            \
                            \cf6 break\cf3 ;\
                            \
                        \cf6 default\cf3 :\
                            \
                            \cf6 break\cf3 ;\
                            \
                    \}\
                    \
                \}\
                \
                \cf6 if\cf3  ((n1+n2+n3+n4+n5+n6)!=d)\{ cout << \cf5 "erreur d\'e9s, recommencer programme"\cf3  << endl;\
                    \
                    fin = \cf8 5\cf3 ;\
                    \
                    cout << n1 << n2 << n3 << n4 << n5 << n6 << endl << d;\}\
                \
                \
                \
                \cf6 if\cf3  ((n1>=\cf8 1\cf3 )&&(n2>=\cf8 1\cf3 )&&(n3>=\cf8 1\cf3 )&&(n4>=\cf8 1\cf3 )&&(n5>=\cf8 1\cf3 )&&(n6>=\cf8 1\cf3 )) \{ ptsopt=\cf8 1500\cf3 ; n1--; n2--; n3--; n4--; n5--; n6--; ptopt.push_back(ptsopt); desopt.push_back(\cf8 6\cf3 ); optch.push_back(\cf5 "123456"\cf3 );\}\
                \
                \cf2 //cout << n1 << n2 << n3 << n4 << n5 << n6 << endl << endl; //temp\cf3 \
                \
                \cf6 switch\cf3 (n6) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 600\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 1200\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "6666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 2400\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "66666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 4800\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "666666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 9600\cf3 ; desopt.push_back(n6); ptopt.push_back(ptsopt); optch.push_back(\cf5 "6666666"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \
                \
                n6 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n5) \{\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        ptsopt=\cf8 50\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        ptsopt=\cf8 50\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5"\cf3 );\
                        \
                        ptsopt=\cf8 50\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 500\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 1000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 2000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "55555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 4000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "555555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 8000\cf3 ; desopt.push_back(n5); ptopt.push_back(ptsopt); optch.push_back(\cf5 "5555555"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                n5 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n4) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 400\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 800\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "4444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 1600\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "44444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 3200\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "444444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 6400\cf3 ; desopt.push_back(n4); ptopt.push_back(ptsopt); optch.push_back(\cf5 "4444444"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                        \
                        \
                \}\
                \
                \
                \
                n4 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n3) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 300\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 600\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "3333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 1200\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "33333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 2400\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "333333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 4800\cf3 ; desopt.push_back(n3); ptopt.push_back(ptsopt); optch.push_back(\cf5 "3333333"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \
                \
                n3 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n2) \{\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 200\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 400\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "2222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 800\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "22222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 1600\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "222222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 3200\cf3 ; desopt.push_back(n2); ptopt.push_back(ptsopt); optch.push_back(\cf5 "2222222"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \
                \
                n2 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 switch\cf3 (n1) \{\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        ptsopt=\cf8 100\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        ptsopt=\cf8 100\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1"\cf3 );\
                        \
                        ptsopt=\cf8 100\cf3 ; desopt.push_back(\cf8 1\cf3 ); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        ptsopt=\cf8 1000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        ptsopt=\cf8 2000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        ptsopt=\cf8 4000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "11111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 :\
                        \
                        ptsopt=\cf8 8000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "111111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 :\
                        \
                        ptsopt=\cf8 16000\cf3 ; desopt.push_back(n1); ptopt.push_back(ptsopt); optch.push_back(\cf5 "1111111"\cf3 );\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 default\cf3 :\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                n1 = \cf8 0\cf3 ;\
                \
                \
                \
                \cf6 for\cf3 (a=\cf8 0\cf3 ; a < optch.size(); a++)\{\
                    \
                    \cf6 for\cf3  (b=\cf8 0\cf3 ; b < optch.size(); b++)\{\
                        \
                        \cf6 if\cf3  ((optch[a]==optch[b])&&(a!=l)&&(desopt[a]!=desopt[b])) \{cout << \cf5 "erreur de typewrite!"\cf3 << optch[a] << optch[b] << endl << endl;\} \cf2 // Utile pour verifier si il n'y a pas d'erreur d'ecriture dans le vecteur optch\cf3 \
                        \
                    \}\
                    \
                \}\
                \
                \
                \
                \cf6 if\cf3  (desopt.size()>\cf8 5\cf3 )\{ cout << \cf5 "erreur trop de possibilites"\cf3  << endl;\
                    \
                    desopt.erase(desopt.begin()+\cf8 5\cf3 , desopt.end());\
                    \
                    ptopt.erase(ptopt.begin()+\cf8 5\cf3 , ptopt.end());\
                    \
                    optch.erase(optch.begin()+\cf8 5\cf3 , optch.end());\
                    \
                \}\
                \
                \cf6 if\cf3  (desopt.size() != ptopt.size()) \{ cout << \cf5 "erreur! vecteur des options pas egal a vecteur pts options"\cf3  << endl;\}\
                \
                \cf6 if\cf3  ((desopt.size() == \cf8 0\cf3 ) && (ptopt.size() == \cf8 0\cf3 )) \{ \cf2 //cout << "Bolito a perdu!"<< endl << endl;\cf3 \
                    \
                    p1 = \cf8 0\cf3 ;\
                    \
                    p2 = \cf8 0\cf3 ;\
                    \
                    nd=\cf8 0\cf3 ;\
                    \
                    z=\cf8 1\cf3 ;\
                    \
                    perdu=\cf8 1\cf3 ;\
                    \
                \}\
                \
                \
                \
                \cf6 if\cf3  ((ptopt.size()!=desopt.size())||(desopt.size()!=optch.size()))\{cout << \cf5 "erreur options!!"\cf3  << endl;\}\
                \
                \
                \
                \cf6 switch\cf3 (desopt.size())\{\
                        \
                    \cf6 case\cf3  \cf8 7\cf3 : cout << \cf5 "erreur de lancer de d\'e9s"\cf3  << endl;\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 6\cf3 : cout << \cf5 "erreur de lancer de d\'e9s"\cf3  << endl;\
                        \
                        \cf6 break\cf3 ;\
                        \
                    \cf6 case\cf3  \cf8 5\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  l=\cf8 0\cf3 ; l < desopt.size(); l++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  h=\cf8 0\cf3 ; h < desopt.size(); h++)\{\
                                \
                                \cf6 for\cf3  (\cf6 int\cf3  k=\cf8 0\cf3 ; k < desopt.size(); k++)\{\
                                    \
                                    \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                                        \
                                        \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                            \
                                            \cf6 if\cf3 ((l<h)&&(h<k)&&(k<j)&&(j<i))\{\
                                                \
                                                w4 = desopt[i]+desopt[j]+desopt[k]+desopt[h]+desopt[l];\
                                                \
                                                w8 = ptopt[i]+ptopt[j]+ptopt[k]+ptopt[h]+ptopt[l];\
                                                \
                                                w12 = optch[i]+optch[j]+optch[k]+optch[h]+optch[l];\
                                                \
                                                sdesopt.push_back(w4);\
                                                \
                                                sptopt.push_back(w8);\
                                                \
                                                soptch.push_back(w12);\
                                                \
                                            \}\
                                            \
                                        \}\
                                        \
                                    \}\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 4\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  h=\cf8 0\cf3 ; h < desopt.size(); h++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  k=\cf8 0\cf3 ; k < desopt.size(); k++)\{\
                                \
                                \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                                    \
                                    \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                        \
                                        \cf6 if\cf3  ((h<k)&&(k<j)&&(j<i))\{\
                                            \
                                            w3 = desopt[i]+desopt[j]+desopt[k]+desopt[h];\
                                            \
                                            w7 = ptopt[i]+ptopt[j]+ptopt[k]+ptopt[h];\
                                            \
                                            w11 = optch[i]+optch[j]+optch[k]+optch[h];\
                                            \
                                            sdesopt.push_back(w3);\
                                            \
                                            sptopt.push_back(w7);\
                                            \
                                            soptch.push_back(w11);\
                                            \
                                        \}\
                                        \
                                    \}\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 3\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  k=\cf8 0\cf3 ; k < desopt.size(); k++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                                \
                                \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                    \
                                    \cf6 if\cf3  ((k<j)&&(j<i))\{\
                                        \
                                        w2  = desopt[i]+desopt[j]+desopt[k];\
                                        \
                                        w6 = ptopt[i]+ptopt[j]+ptopt[k];\
                                        \
                                        w10 = optch[i]+optch[j]+optch[k];\
                                        \
                                        sdesopt.push_back(w2);\
                                        \
                                        sptopt.push_back(w6);\
                                        \
                                        soptch.push_back(w10);\
                                        \
                                    \}\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 2\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  j=\cf8 0\cf3 ; j < desopt.size(); j++)\{\
                            \
                            \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                                \
                                \cf6 if\cf3  (j<i)\{\
                                    \
                                    w1 = desopt[i]+desopt[j];\
                                    \
                                    w5 = ptopt[i]+ptopt[j];\
                                    \
                                    w9 = optch[i]+optch[j];\
                                    \
                                    sdesopt.push_back(w1);\
                                    \
                                    sptopt.push_back(w5);\
                                    \
                                    soptch.push_back(w9);\
                                    \
                                \}\
                                \
                            \}\
                            \
                        \}\
                        \
                    \cf6 case\cf3  \cf8 1\cf3 :\
                        \
                        \cf6 for\cf3  (\cf6 int\cf3  i=\cf8 0\cf3 ; i < desopt.size(); i++)\{\
                            \
                            sdesopt.push_back(desopt[i]);\
                            \
                            sptopt.push_back(ptopt[i]);\
                            \
                            soptch.push_back(optch[i]);\
                            \
                        \}\
                        \
                        \cf6 break\cf3 ;\
                        \
                \}\
                \
                \cf6 if\cf3  (sdesopt.size()!=sptopt.size())\{cout << \cf5 "erreur options!"\cf3  << endl;\}\
                \
                \cf6 if\cf3 (perdu!=\cf8 1\cf3 )\{\
                    \
                    p2 = *max_element(sptopt.begin(), sptopt.end()); \cf2 //nombre de points si arret\cf3 \
                    \
                    \cf6 for\cf3 (g=\cf8 0\cf3 ;p2!=sptopt[g];g++)\{\
                        \
                    \}\
                    \
                    \cf2 // nd = nombres de d\'e9s du lancer suivant\cf3 \
                    \
                    \cf2 // d = nombres de d\'e9s lors de ce lancer\cf3 \
                    \
                    \
                    \
                    \cf6 if\cf3  ((ord4<\cf8 1000\cf3 )&&(ord4>=\cf8 0\cf3 )&&(score2meiljo<=\cf8 10000\cf3 ))\{   \cf2 //cas au debut du tour\cf3 \
                        \
                        \cf6 if\cf3 (p1+p2<= \cf8 1000\cf3 )\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*\cf8 0.8\cf3 ); \cf2 //Vecteur esperance de gain avec chaque option\cf3 \
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\}\
                            nd = (d-sdesopt[i]);\
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \
                            \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                            \
                            p1 = p1+sptopt[i];\
                            p2 = \cf8 0\cf3 ;\
                            d = nd;\
                        \}\
                        \
                        \
                        \
                        \cf6 if\cf3  (p1+p2> \cf8 1000\cf3 )\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*exp(\cf8 1.2\cf3 )); \cf2 //Vecteur esperance de gain avec chaque option\cf3 \
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \
                            \cf6 if\cf3  (maxopt > p2)\{\
                                \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+p2 << " points et " << nd << " d\'e9s."<< endl;\cf3 \
                                \
                                p1 = p1+p2;\
                                \
                                p2 = \cf8 0\cf3 ;\
                                \
                                d = nd;\
                                \
                            \}\
                            \
                            \cf6 if\cf3  (maxopt<= p2)\{\
                                \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " << soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord4=ord4+p1+p2;\
                                \
                                \cf2 //cout << ord4 << " points." << endl;\cf3 \
                                \
                                z = \cf8 1\cf3 ;\
                            \}\
                        \}\
                    \}\
                    \cf6 else\cf3  \cf6 if\cf3  (score2meiljo>\cf8 10000\cf3 )\{\
                        \
                        \cf6 if\cf3  (p1+p2+ord4<=score2meiljo)\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*\cf8 0.8\cf3 );\
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \
                            \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s."<< endl;\cf3 \
                            \
                            p1 = p1+sptopt[i];\
                            \
                            p2 = \cf8 0\cf3 ;\
                            \
                            d = nd;\
                            \
                        \}\
                        \
                        \cf6 if\cf3  (p1+p2+ord4>score2meiljo)\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \cf6 int\cf3  delta10;\
                                delta10 = ord4+p1+p2-score2meiljo;\
                                \cf6 if\cf3 (delta10 >= \cf8 955\cf3 )\{\
                                    \cf6 if\cf3  (nd==\cf8 7\cf3 )\{edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e]));\}\
                                    \cf6 else\cf3 \{edg.push_back(\cf8 0\cf3 );\}\
                                \}\
                                \cf6 else\cf3 \{\
                                    \cf6 if\cf3  ((nd==\cf8 7\cf3 )&&(nd==\cf8 6\cf3 ))\{edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e]));\}\
                                    \cf6 else\cf3 \{edg.push_back(\cf8 0\cf3 );\}\
                                \}\
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                            \}\
                            nd = (d-sdesopt[i]);\
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \cf6 if\cf3  (maxopt > p2)\{\
                                \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                                p1 = p1+sptopt[i];\
                                p2 = \cf8 0\cf3 ;\
                                d = nd;\
                            \}\
                            \
                            \cf6 if\cf3  (maxopt <= p2)\{\
                                \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " <<           soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord4=ord4+p1+p2;\
                                \
                                \cf2 //cout << ord4 << " points." << endl;\cf3 \
                                z = \cf8 1\cf3 ;\
                            \}\
                        \}\
                    \}\
                    \
                    \cf6 else\cf3  \cf6 if\cf3  ((ord4>=\cf8 1000\cf3 )&&(score2meiljo<=\cf8 10000\cf3 )) \{\
                        \
                        \cf6 if\cf3  (ord4 >= score2meiljo)\{\
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])); \cf2 //Vecteur esperance de gain avec chaque option\cf3 \
                                \
                            \}\
                            \
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \cf6 if\cf3  (maxopt > p2)\{ \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                                \
                                p1 = p1+sptopt[i];\
                                \
                                p2 = \cf8 0\cf3 ;\
                                \
                                d = nd;\
                                \
                            \}\
                            \
                            \cf6 if\cf3  (maxopt<= p2)\{ \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " << soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord4=ord4+p1+p2;\
                                \
                                \cf2 //cout << ord4 << " points." << endl;\cf3 \
                                \
                                z = \cf8 1\cf3 ;\
                                \
                            \}\
                            \
                            \
                            \
                        \}\
                        \
                        \
                        \
                        \cf6 else\cf3  \cf6 if\cf3  (ord4 < score2meiljo)\{\
                            \
                            \
                            \
                            deltatj = \cf8 1\cf3 +\cf6 int\cf3 ((\cf8 10050\cf3 -score2meiljo)/(ptsmoy[\cf8 7\cf3 ]));\
                            \
                            deltaptt = \cf8 1\cf3  + (\cf8 10050\cf3 -ord4)/(deltatj);\
                            \
                            \
                            \
                            \cf6 for\cf3  (e=\cf8 0\cf3 ; e < sdesopt.size(); e++)\{\
                                \
                                nd = (d-sdesopt[e]);\
                                \
                                \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                                \
                                \cf6 double\cf3  pond;\
                                pond = exp(-(\cf8 0.5\cf3 )*(((p1+p2-deltaptt)/(deltaptt*\cf8 0.5\cf3 ))*((p1+p2-deltaptt)/(deltaptt*\cf8 0.5\cf3 ))));\
                                \
                                edg.push_back(ptsmoy[nd]-pperte[nd]*(p1+sptopt[e])*pond);\
                                \
                            \}\
                            \cf6 for\cf3  (h=\cf8 0\cf3 ; h < edg.size() ; h++)\{\
                                \
                                ptchem.push_back(edg[h]+sptopt[h]);\
                                \
                            \}\
                            \
                            maxopt = *max_element(ptchem.begin(), ptchem.end());\
                            \
                            \cf6 for\cf3 (i=\cf8 0\cf3 ; maxopt!= \cf6 int\cf3 (edg[i]+sptopt[i]); i++)\{\
                                \
                            \}\
                            \
                            nd = (d-sdesopt[i]);\
                            \
                            \cf6 if\cf3 (nd==\cf8 0\cf3 )\{nd = nd+\cf8 7\cf3 ;\}\
                            \cf6 if\cf3  (maxopt > p2)\{ \cf2 //cout << "Je continue mon tour et je choisis le(s) d\'e9(s) " << soptch[i] << ". Je me retrouve avec " << p1+sptopt[i] << " points et " << nd << " d\'e9s." << endl;\cf3 \
                                \
                                p1 = p1+sptopt[i];\
                                \
                                p2 = \cf8 0\cf3 ;\
                                \
                                d = nd;\
                                \
                            \}\
                            \
                            \cf6 if\cf3  (maxopt <= p2)\{ \cf2 //cout << "En tant qu'intelligence artificielle sage, je m'incline devant mon d\'e9veloppeur et sa troupe et je m'arr\'eate en prenant le(s) d\'e9(s) " << soptch[g] << " et en totalisant " << p1 + p2 << " points. Mon score est alors de: ";\cf3 \
                                \
                                ord4=ord4+p1+p2;\
                                \
                                \cf2 //cout << ord4 << " points." << endl;\cf3 \
                                \
                                z = \cf8 1\cf3 ;\
                            \}\
                        \}\
                    \}\
                    \cf6 else\cf3  \{cout << \cf5 "erreur score ordi!"\cf3  << endl;\}\
            \}\
                \
                perdu=\cf8 0\cf3 ;\
                \
                edg.clear();\
                sptopt.clear();\
                sdesopt.clear();\
                soptch.clear();\
                ptchem.clear();\
                ptopt.clear();\
                desopt.clear();\
                optch.clear();\
                des.clear();\
                \
            \}\
            \cf6 if\cf3 ((ord4>\cf8 10000\cf3 )&&(ord4>score2meiljo))\{\
                vict=\cf8 4\cf3 ;\
            \}\
            z=\cf8 0\cf3 ;\
            p1=\cf8 0\cf3 ;\
            p2=\cf8 0\cf3 ;\
            nd=\cf8 0\cf3 ;\
            d=\cf8 7\cf3 ;\
            \cf2 //cout << ord1 << " " << ord2 << " " << ord3 << " " << ord4 << endl << endl;\cf3 \
            joueurs.clear();\
            joueurs.push_back(ord1);\
            joueurs.push_back(ord2);\
            joueurs.push_back(ord3);\
            joueurs.push_back(ord4);\
        \cf6 if\cf3 (vict==\cf8 1\cf3 )\{fin=\cf8 1\cf3 ;\}\
        \cf6 if\cf3 (vict==\cf8 2\cf3 )\{fin=\cf8 2\cf3 ;\}\
        \cf6 if\cf3 (vict==\cf8 3\cf3 )\{fin=\cf8 3\cf3 ;\}\
        \cf6 if\cf3 (vict==\cf8 4\cf3 )\{fin=\cf8 4\cf3 ;\}\
            scoremeiljo = max(max(ord1,ord2), max(ord3,ord4));\
            \
            \cf6 for\cf3 (m=\cf8 0\cf3 ; scoremeiljo != joueurs[m]; m++)\{\
            \}\
            meiljo = nj[m];\
        countturn++;\
    \}\
       \cf2 // cout << vict << endl;\cf3 \
        \cf2 //cout << fin << endl << endl << endl;\cf3 \
    \cf6 if\cf3 (fin==\cf8 1\cf3 )\{count1++;\}\
    \cf6 if\cf3 (fin==\cf8 2\cf3 )\{count2++;\}\
    \cf6 if\cf3 (fin==\cf8 3\cf3 )\{count3++;\}\
    \cf6 if\cf3 (fin==\cf8 4\cf3 )\{count4++;\}\
        fin=\cf8 0\cf3 ;\
        ord1=\cf8 0\cf3 ; ord2=\cf8 0\cf3 ; ord3=\cf8 0\cf3 ; ord4=\cf8 0\cf3 ;\
\}\
   cout << countturn/f << endl;\
    cout << countturn;\
cout << endl << count1 << endl << count2 << endl << count3 << endl << count4 << endl;\
\}}